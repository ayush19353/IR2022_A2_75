# -*- coding: utf-8 -*-
"""IR_ASSIGNMENT2_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PnbNTYpy5-aPajSgPHvZqb9PTf35AKZp
"""

import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

f = open("/content/drive/MyDrive/Assignment2_IR/IR-assignment-2-data.txt", 'r')



import matplotlib.pyplot as plt



values= []
r_score=[]
j=0
#1=0
t=0
Data_values={}
kk=0
for i in f.readlines():
    if i.split(" ")[1].split(":")[1]=='4': # only qid-4
        #print("gg")
        Data_values[kk]=i
        kk=kk+1
        r_score.append(i.split(" ")[0]) # the relevance score values of every qid- 4
        ans= i.split(" ")[76].split(":")[1]# sum of tf-idf
        ans=float(ans)
        if i.split(" ")[0]>'0':
            values.append([1,ans])#values storing the relevance score along with 
            t=t+1

        else:
            values.append([0,ans])
            
            #f1=f1+1
        j=j+1
print(r_score)        

for k in range(0,len(r_score)):
  r_score[k]=[str(k),r_score[k]]
r_score1=r_score
print(j)
print(r_score)
print(values)

""" Make a file rearranging the query-url pairs in order of max DCG. State how many such
files could be made.
"""



r_score1 = sorted(r_score1, key=lambda x: x[1], reverse=True) # sorted relevacne score

r_score1

f = open("/content/drive/MyDrive/Assignment2_IR/IR-assignment-2-data.txt", 'r')
output_File=open("output_File_rel_sorted.txt","w")
total_doc_count=0 
for kb in r_score1: 
  output_File.writelines(Data_values[(int)(kb[0])])
  total_doc_count=total_doc_count+1 
print(total_doc_count)

f = open("/content/drive/MyDrive/Assignment2_IR/IR-assignment-2-data.txt", 'r')
output_File=open("output_File.txt","w")
count=0 
for i in f.readlines():

    if count in Data_values.keys():
        output_File.writelines(i)
    else: 
      break 
    count=count+1

import math

"""Compute nDCG
(a) At 50
(b) For the whole dataset
"""

print("For whole set")
relevance1=[] # nDCG score for whole document
relevance1_sorted=[]
values_doc=[0]*4
val_0=0
val_1=0
val_2=0
val_3=0
i=0
while(i<len(r_score)):# calcualting number of relevance score documents
    relevance1.append(r_score[i][1])
    relevance1_sorted.append(r_score1[i][1])
    if(r_score[i][1]=='0'):
        values_doc[0]=values_doc[0]+1
        val_0=val_0+1
    if(r_score[i][1]=='1'):
        values_doc[1]=values_doc[1]+1
        val_1=val_1+1
    if(r_score[i][1]=='2'):
        values_doc[2]=values_doc[2]+1
        val_2=val_2+1
    if(r_score[i][1]=='3'):
        values_doc[3]=values_doc[3]+1
        val_3=val_3+1
    i=i+1

DCG_Score= (float)(relevance1[0])
#print(DCG_Score)
for i in range(1,len(relevance1)):# calculating dcg score of the non sorted relevance score
    az=math.log((i+1),2)
    az1= (relevance1[i])
    DCG_Score=((float)(az1)/az)+DCG_Score
print("DCG score for non sorted relevacne score",DCG_Score)
D1=float(DCG_Score) # DCG score of non sorted relevance score
DCG_Score=(float)(relevance1_sorted[0])
for i in range(1,len(relevance1_sorted)):
    az=math.log((i+1),2)
    az1= relevance1_sorted[i]
    DCG_Score=((float)(az1)/(az))+DCG_Score
print("DCG score for sorted relevance score",DCG_Score)
D2=float(DCG_Score) #DCG score of sorted relevance score
total_files=math.factorial(val_3)*math.factorial(val_2)*math.factorial(val_1)*math.factorial(val_0)
Final_DCG=D1/D2 # nDCG
print("nDCG for the whole doc",Final_DCG)
print(values_doc)

# using ohter DCG caluclating method
DCG_Score= 0
#print(DCG_Score)
for i in range(1,len(relevance1)):# calculating dcg score of the non sorted relevance score
    az=math.log((i+1),2)
    az1= relevance1[i-1]
    DCG_Score=DCG_Score+(math.pow(2,(float)(az1)) - 1)/az
print("DCG score for non sorted relevacne score -other method",DCG_Score)
D1=float(DCG_Score) # DCG score of non sorted relevance score
DCG_Score=0
for i in range(1,len(relevance1_sorted)):
    az=math.log((i+1),2)
    az1= relevance1_sorted[i-1]
    DCG_Score=DCG_Score+(math.pow(2,(float)(az1)) - 1)/az
print("DCG score for sorted relevance score- other method",DCG_Score)
D2=float(DCG_Score) #DCG score of sorted relevance score
total_files=math.factorial(val_3)*math.factorial(val_2)*math.factorial(val_1)*math.factorial(val_0)
Final_DCG=D1/D2 # nDCG
print("nDCG for the whole doc other method",Final_DCG)
print(values_doc)

print("FOR 50 documents")
relevance1=[] # nDCG score for 50 documents
relevance1_sorted=[]
values_doc=[0]*4
val_0=0
val_1=0
val_2=0
val_3=0
i=0
while(i<len(r_score)):# calcualting number of relevance score documents
    relevance1.append(r_score[i][1])
    relevance1_sorted.append(r_score1[i][1])
    if(r_score[i][1]=='0'):
        values_doc[0]=values_doc[0]+1
        val_0=val_0+1
    if(r_score[i][1]=='1'):
        values_doc[1]=values_doc[1]+1
        val_1=val_1+1
    if(r_score[i][1]=='2'):
        values_doc[2]=values_doc[2]+1
        val_2=val_2+1
    if(r_score[i][1]=='3'):
        values_doc[3]=values_doc[3]+1
        val_3=val_3+1
    i=i+1

DCG_Score= (float)(relevance1[0])
#print(DCG_Score)
for i in range(1,51):# calculating dcg score of the non sorted relevance score
    az=math.log((i+1),2)
    az1= (relevance1[i])
    DCG_Score=((float)(az1)/az)+DCG_Score
print("DCG score for non sorted relevacne score",DCG_Score)
D1=float(DCG_Score) # DCG score of non sorted relevance score
DCG_Score=(float)(relevance1_sorted[0])
for i in range(1,51):
    az=math.log((i+1),2)
    az1= relevance1_sorted[i]
    DCG_Score=((float)(az1)/(az))+DCG_Score
print("DCG score for sorted relevance score",DCG_Score)
D2=float(DCG_Score) #DCG score of sorted relevance score
total_files=math.factorial(val_3)*math.factorial(val_2)*math.factorial(val_1)*math.factorial(val_0)
Final_DCG=D1/D2 # nDCG
print("nDCG for the whole doc",Final_DCG)
print(values_doc)

# using ohter DCG caluclating method
DCG_Score= 0
#print(DCG_Score)
for i in range(1,51):# calculating dcg score of the non sorted relevance score
    az=math.log((i+1),2)
    az1= relevance1[i-1]
    DCG_Score=DCG_Score+(math.pow(2,(float)(az1)) - 1)/az
print("DCG score for non sorted relevacne score -other method",DCG_Score)
D1=float(DCG_Score) # DCG score of non sorted relevance score
DCG_Score=0
for i in range(1,51):
    az=math.log((i+1),2)
    az1= relevance1_sorted[i-1]
    DCG_Score=DCG_Score+(math.pow(2,(float)(az1)) - 1)/az
print("DCG score for sorted relevance score- other method",DCG_Score)
D2=float(DCG_Score) #DCG score of sorted relevance score
total_files=math.factorial(val_3)*math.factorial(val_2)*math.factorial(val_1)*math.factorial(val_0)
Final_DCG=D1/D2 # nDCG
print("nDCG for the whole doc other method",Final_DCG)
print(values_doc)



def cal(c1,c2):
  return c1/c2

values = sorted(values,key=lambda x: x[1],reverse=True)
print(values) 

precision_val = []
recall_val = []
c_score=1
va=0

for m in values:# calculating the precision and recall and then plotting the graphs
    precision_val.append(cal(va,c_score))
    c_score=c_score+1
    recall_val.append(cal(va,t))
    if m[0]==1:
        va=va+1
   
plt.ylabel('Recall')
plt.xlabel('Precision')
plt.title('Precision Recall')
plt.plot(recall_val,precision_val)
plt.show()

